// Code generated by protoc-gen-gogo.
// source: genericsmrprotobuf/genericsmrprotobuf.proto
// DO NOT EDIT!

/*
	Package genericsmrprotobuf is a generated protocol buffer package.

	It is generated from these files:
		genericsmrprotobuf/genericsmrprotobuf.proto

	It has these top-level messages:
		Propose
		ProposeReplyTS
*/
package genericsmrprotobuf

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import epaxosprotobuf "github.com/relab/epaxos/epaxosprotobuf"

import io "io"
import github_com_relab_epaxos_fastrpc "github.com/relab/epaxos/fastrpc"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type Ok int32

const (
	NACK Ok = 0
	OK   Ok = 1
)

var Ok_name = map[int32]string{
	0: "NACK",
	1: "OK",
}
var Ok_value = map[string]int32{
	"NACK": 0,
	"OK":   1,
}

func (x Ok) String() string {
	return proto.EnumName(Ok_name, int32(x))
}
func (Ok) EnumDescriptor() ([]byte, []int) { return fileDescriptorGenericsmrprotobuf, []int{0} }

type Propose struct {
	CommandId int32                   `protobuf:"varint,1,opt,name=command_id,json=commandId,proto3" json:"command_id,omitempty"`
	Command   *epaxosprotobuf.Command `protobuf:"bytes,2,opt,name=command" json:"command,omitempty"`
	Timestamp int64                   `protobuf:"varint,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (m *Propose) Reset()                    { *m = Propose{} }
func (m *Propose) String() string            { return proto.CompactTextString(m) }
func (*Propose) ProtoMessage()               {}
func (*Propose) Descriptor() ([]byte, []int) { return fileDescriptorGenericsmrprotobuf, []int{0} }

func (m *Propose) GetCommand() *epaxosprotobuf.Command {
	if m != nil {
		return m.Command
	}
	return nil
}

type ProposeReplyTS struct {
	Ok        Ok    `protobuf:"varint,1,opt,name=ok,proto3,enum=genericsmrprotobuf.Ok" json:"ok,omitempty"`
	CommandId int32 `protobuf:"varint,2,opt,name=command_id,json=commandId,proto3" json:"command_id,omitempty"`
	Value     int64 `protobuf:"varint,3,opt,name=value,proto3" json:"value,omitempty"`
	Timestamp int64 `protobuf:"varint,4,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (m *ProposeReplyTS) Reset()                    { *m = ProposeReplyTS{} }
func (m *ProposeReplyTS) String() string            { return proto.CompactTextString(m) }
func (*ProposeReplyTS) ProtoMessage()               {}
func (*ProposeReplyTS) Descriptor() ([]byte, []int) { return fileDescriptorGenericsmrprotobuf, []int{1} }

func init() {
	proto.RegisterType((*Propose)(nil), "genericsmrprotobuf.Propose")
	proto.RegisterType((*ProposeReplyTS)(nil), "genericsmrprotobuf.ProposeReplyTS")
	proto.RegisterEnum("genericsmrprotobuf.Ok", Ok_name, Ok_value)
}
func (m *Propose) New() github_com_relab_epaxos_fastrpc.Serializable {
	return new(Propose)
}

func (m *Propose) Marshal(w io.Writer) {
	size := m.Size()
	data := make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		panic(err)
	}
	w.Write(data[:n])
}

func (m *Propose) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.CommandId != 0 {
		data[i] = 0x8
		i++
		i = encodeVarintGenericsmrprotobuf(data, i, uint64(m.CommandId))
	}
	if m.Command != nil {
		data[i] = 0x12
		i++
		i = encodeVarintGenericsmrprotobuf(data, i, uint64(m.Command.Size()))
		n1, err := m.Command.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.Timestamp != 0 {
		data[i] = 0x18
		i++
		i = encodeVarintGenericsmrprotobuf(data, i, uint64(m.Timestamp))
	}
	return i, nil
}

func (m *ProposeReplyTS) New() github_com_relab_epaxos_fastrpc.Serializable {
	return new(ProposeReplyTS)
}

func (m *ProposeReplyTS) Marshal(w io.Writer) {
	size := m.Size()
	data := make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		panic(err)
	}
	w.Write(data[:n])
}

func (m *ProposeReplyTS) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Ok != 0 {
		data[i] = 0x8
		i++
		i = encodeVarintGenericsmrprotobuf(data, i, uint64(m.Ok))
	}
	if m.CommandId != 0 {
		data[i] = 0x10
		i++
		i = encodeVarintGenericsmrprotobuf(data, i, uint64(m.CommandId))
	}
	if m.Value != 0 {
		data[i] = 0x18
		i++
		i = encodeVarintGenericsmrprotobuf(data, i, uint64(m.Value))
	}
	if m.Timestamp != 0 {
		data[i] = 0x20
		i++
		i = encodeVarintGenericsmrprotobuf(data, i, uint64(m.Timestamp))
	}
	return i, nil
}

func encodeFixed64Genericsmrprotobuf(data []byte, offset int, v uint64) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	data[offset+4] = uint8(v >> 32)
	data[offset+5] = uint8(v >> 40)
	data[offset+6] = uint8(v >> 48)
	data[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Genericsmrprotobuf(data []byte, offset int, v uint32) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintGenericsmrprotobuf(data []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		data[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	data[offset] = uint8(v)
	return offset + 1
}
func (m *Propose) Size() (n int) {
	var l int
	_ = l
	if m.CommandId != 0 {
		n += 1 + sovGenericsmrprotobuf(uint64(m.CommandId))
	}
	if m.Command != nil {
		l = m.Command.Size()
		n += 1 + l + sovGenericsmrprotobuf(uint64(l))
	}
	if m.Timestamp != 0 {
		n += 1 + sovGenericsmrprotobuf(uint64(m.Timestamp))
	}
	return n
}

func (m *ProposeReplyTS) Size() (n int) {
	var l int
	_ = l
	if m.Ok != 0 {
		n += 1 + sovGenericsmrprotobuf(uint64(m.Ok))
	}
	if m.CommandId != 0 {
		n += 1 + sovGenericsmrprotobuf(uint64(m.CommandId))
	}
	if m.Value != 0 {
		n += 1 + sovGenericsmrprotobuf(uint64(m.Value))
	}
	if m.Timestamp != 0 {
		n += 1 + sovGenericsmrprotobuf(uint64(m.Timestamp))
	}
	return n
}

func sovGenericsmrprotobuf(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozGenericsmrprotobuf(x uint64) (n int) {
	return sovGenericsmrprotobuf(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Propose) Unmarshal(r io.Reader, size int) error {
	data := make([]byte, size)
	_, err := io.ReadFull(r, data)
	if err != nil {
		panic("unmarshal read full err")
	}
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenericsmrprotobuf
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Propose: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Propose: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommandId", wireType)
			}
			m.CommandId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenericsmrprotobuf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.CommandId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Command", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenericsmrprotobuf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenericsmrprotobuf
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Command == nil {
				m.Command = &epaxosprotobuf.Command{}
			}
			if err := m.Command.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			m.Timestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenericsmrprotobuf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Timestamp |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGenericsmrprotobuf(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGenericsmrprotobuf
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProposeReplyTS) Unmarshal(r io.Reader, size int) error {
	data := make([]byte, size)
	_, err := io.ReadFull(r, data)
	if err != nil {
		panic("unmarshal read full err")
	}
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenericsmrprotobuf
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProposeReplyTS: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProposeReplyTS: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ok", wireType)
			}
			m.Ok = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenericsmrprotobuf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Ok |= (Ok(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommandId", wireType)
			}
			m.CommandId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenericsmrprotobuf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.CommandId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			m.Value = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenericsmrprotobuf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Value |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			m.Timestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenericsmrprotobuf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Timestamp |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGenericsmrprotobuf(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGenericsmrprotobuf
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGenericsmrprotobuf(data []byte) (n int, err error) {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGenericsmrprotobuf
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGenericsmrprotobuf
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if data[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGenericsmrprotobuf
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthGenericsmrprotobuf
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowGenericsmrprotobuf
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := data[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipGenericsmrprotobuf(data[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthGenericsmrprotobuf = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGenericsmrprotobuf   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("genericsmrprotobuf/genericsmrprotobuf.proto", fileDescriptorGenericsmrprotobuf)
}

var fileDescriptorGenericsmrprotobuf = []byte{
	// 275 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0xd2, 0x4e, 0x4f, 0xcd, 0x4b,
	0x2d, 0xca, 0x4c, 0x2e, 0xce, 0x2d, 0x2a, 0x28, 0xca, 0x2f, 0xc9, 0x4f, 0x2a, 0x4d, 0xd3, 0xc7,
	0x14, 0xd2, 0x03, 0x33, 0x84, 0x84, 0x30, 0x65, 0xa4, 0x8c, 0xd3, 0x33, 0x4b, 0x32, 0x4a, 0x93,
	0xf4, 0x92, 0xf3, 0x73, 0xf5, 0x8b, 0x52, 0x73, 0x12, 0x93, 0xf4, 0x53, 0x0b, 0x12, 0x2b, 0xf2,
	0x8b, 0xa1, 0x14, 0xdc, 0x50, 0x08, 0x17, 0x62, 0x90, 0x52, 0x25, 0x17, 0x7b, 0x40, 0x51, 0x7e,
	0x41, 0x7e, 0x71, 0xaa, 0x90, 0x2c, 0x17, 0x57, 0x72, 0x7e, 0x6e, 0x6e, 0x62, 0x5e, 0x4a, 0x7c,
	0x66, 0x8a, 0x04, 0xa3, 0x02, 0xa3, 0x06, 0x6b, 0x10, 0x27, 0x54, 0xc4, 0x33, 0x45, 0xc8, 0x90,
	0x8b, 0x1d, 0xca, 0x91, 0x60, 0x52, 0x60, 0xd4, 0xe0, 0x36, 0x12, 0xd7, 0x43, 0x35, 0x58, 0xcf,
	0x19, 0x22, 0x1d, 0x04, 0x53, 0x27, 0x24, 0xc3, 0xc5, 0x59, 0x92, 0x99, 0x9b, 0x5a, 0x5c, 0x92,
	0x98, 0x5b, 0x20, 0xc1, 0xac, 0xc0, 0xa8, 0xc1, 0x1c, 0x84, 0x10, 0x50, 0xea, 0x66, 0xe4, 0xe2,
	0x83, 0xda, 0x1d, 0x94, 0x5a, 0x90, 0x53, 0x19, 0x12, 0x2c, 0xa4, 0xc6, 0xc5, 0x94, 0x9f, 0x0d,
	0xb6, 0x9a, 0xcf, 0x48, 0x4c, 0x0f, 0x8b, 0xef, 0xfd, 0xb3, 0x83, 0x98, 0xf2, 0xb3, 0xd1, 0x9c,
	0xca, 0x84, 0xee, 0x54, 0x11, 0x2e, 0xd6, 0xb2, 0xc4, 0x9c, 0xd2, 0x54, 0xa8, 0x9d, 0x10, 0x0e,
	0xaa, 0x6b, 0x58, 0xd0, 0x5c, 0xa3, 0x25, 0xc6, 0xc5, 0xe4, 0x9f, 0x2d, 0xc4, 0xc1, 0xc5, 0xe2,
	0xe7, 0xe8, 0xec, 0x2d, 0xc0, 0x20, 0xc4, 0xc6, 0xc5, 0xe4, 0xef, 0x2d, 0xc0, 0xe8, 0x24, 0x70,
	0xe1, 0xa1, 0x1c, 0xc3, 0x89, 0x47, 0x72, 0x8c, 0x17, 0x1e, 0xc9, 0x31, 0x3e, 0x78, 0x24, 0xc7,
	0x98, 0xc4, 0x06, 0x76, 0x8d, 0x31, 0x20, 0x00, 0x00, 0xff, 0xff, 0x27, 0x8f, 0x31, 0x78, 0xb1,
	0x01, 0x00, 0x00,
}
